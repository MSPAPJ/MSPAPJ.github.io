<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dubbo-demo4：带springboot、zookeeper的日志链路追踪示例</title>
      <link href="/2022/09/23/dubbo-4/"/>
      <url>/2022/09/23/dubbo-4/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我们基于SLF4J的MDC机制和Dubbo的Filter机制，实现系统的日志追踪。</p><p>本项目需要启动 zookeeper 作为注册中心。</p><p>技术栈包括 springboot + dubbo + zookeeper，采用注册中心连接方式<br>分为4部分</p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>dubbo-demo4-common</td><td>公共部分，工具类，过滤器等</td></tr><tr><td>dubbo-demo4-api</td><td>服务提供方的抽象接口</td></tr><tr><td>dubbo-demo4-provider</td><td>服务提供方的具体实现</td></tr><tr><td>dubbo-demo4-consumer</td><td>服务调用方</td></tr></tbody></table><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java11</span><br><span class="line">maven 3.8.4</span><br><span class="line">dubbo 3.0.5</span><br><span class="line">springboot 2.7.2</span><br></pre></td></tr></table></figure><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><p>使用默认的 SLF4J + Logback。</p><p>但是呢，SLF4J 提供了一个 MDC 机制，它的设计目标就是为了应对分布式应用系统的审计和调试。</p><p>所以，我们可以利用 MDC ，然后配合 Dubbo 的 RpcContext 来做分布式系统的全链路日志功能。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>logback.xml，resources目录下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤级别 All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 程序服务名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;SERVICE_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;unknown&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATH&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logging.file.path&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;/Users/howinfun/weblog/java/$&#123;SERVICE_NAME&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logging.pattern&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] [%-5level] [%logger&#123;5&#125;] [%X&#123;uri&#125;] [%X&#123;trace_id&#125;] - %msg%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的注释已经写得非常的清晰了，而我们最主要关注的就是<code>LOG_PATTERN</code> 这个属性。它主要是规定了日志打印的规范，如何打印日志，日志该带上哪些关键信息。</p><ul><li><code>[%X&#123;uri&#125;]</code>：这里主要是记录接口的请求 uri。</li><li><code>[%X&#123;trace_id&#125;]</code>：这里主要是记录此次请求的 TraceId，这个 TraceId 也会带到 Dubbo 的服务提供端，让整个链路都带上这个 TraceId。这样在日志记录的时候，全都可以利用 TraceId 了。</li></ul><p>这样等到日志排查的时候，只需要前端或者测试给后端的同学提供一个 TraceId，我们就能非常快速的定位到问题所在了。</p><blockquote><p>下面的项目都是引入 xml 文件即可。</p></blockquote><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>父项目</p><p><a href="https://imgse.com/i/vgA2Cj"><img src="https://s1.ax1x.com/2022/08/24/vgA2Cj.png" alt="vgA2Cj.png"></a></p><p>父项目pom文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-demo4<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>示例项目，链路跟踪<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- java版本，11 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.0.5以上版本存在文件锁或者不能正常启动的问题，所以没有使用更高版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo-starter.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">dubbo-starter.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zkclient.version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">zkclient.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">curator.version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">curator.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- apache 官方 3.0 starter依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zookeeper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        </span><br><span class="line">        <span class="comment">&lt;!-- zookeeper客户端 只需引入此依赖curator-framework curator-recipes 都有 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-x-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;curator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试时引用src/main/resources下的资源文件 如果test下面有同类型的文件,则以test的为准--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--公共--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo4-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务提供者抽象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo4-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务提供者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo4-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务消费者--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo4-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dubbo-demo4-common"><a href="#dubbo-demo4-common" class="headerlink" title="dubbo-demo4-common"></a>dubbo-demo4-common</h3><p>提供一个工具类和一个过滤器</p><p><a href="https://imgse.com/i/vgkUXV"><img src="https://s1.ax1x.com/2022/08/24/vgkUXV.png" alt="vgkUXV.png"></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.RpcContext;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.MDC;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Trace 工具</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TraceUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRACE_ID</span> <span class="operator">=</span> <span class="string">&quot;trace_id&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRACE_URI</span> <span class="operator">=</span> <span class="string">&quot;uri&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 TraceId</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment">     *            请求uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initTraceInfo</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(MDC.get(TRACE_ID))) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> generateTraceId();</span><br><span class="line">            setTraceId(traceId);</span><br><span class="line">            setTraceUri(uri);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 RpcContext 中获取 Trace 相关信息，包括 TraceId 和 TraceUri 给 Dubbo 服务提供端获取值调用</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     *            Dubbo 的 RPC 上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getTraceFromRpcContext</span><span class="params">(RpcContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> context.getAttachment(TRACE_ID);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(traceId)) &#123;</span><br><span class="line">            setTraceId(traceId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> context.getAttachment(TRACE_URI);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(uri)) &#123;</span><br><span class="line">            setTraceUri(uri);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 Trace 相关信息，包括 TraceId 和 TraceUri 放入 RPC上下文中 给 Dubbo 消费端调用</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     *            Dubbo 的 RPC 上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTraceInto2RpcContext</span><span class="params">(RpcContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> MDC.get(TRACE_ID);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(traceId)) &#123;</span><br><span class="line">            context.setAttachment(TRACE_ID, traceId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> MDC.get(TRACE_URI);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(uri)) &#123;</span><br><span class="line">            context.setAttachment(TRACE_URI, uri);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 MDC 中清除当前线程的 Trace信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearTraceInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        MDC.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 将traceId放入MDC</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span> setTraceId 链路id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTraceId</span><span class="params">(String traceId)</span> &#123;</span><br><span class="line">        MDC.put(TRACE_ID, traceId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将traceUri放入MDC</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span> setTraceUri 来源uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTraceUri</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">        MDC.put(TRACE_URI, uri);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成traceId</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 链路ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">generateTraceId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toUnsignedString(random.nextLong());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个工具类提供了几个很重要的方法：</p><ul><li>TraceId 的初始化：生成 TraceId，并利用 MDC 将 Trace 相关信息存放在当前线程（请求）的 ThreaLocal 中。</li><li>TraceId 的存放：将当前线程（请求）的 Trace 相关信息存放在 Dubbo 的 RPC 上下文 RpcContext 中，这样可以将当前请求的 Trace 信息传递到 Dubbo 的服务提供者。</li><li>TraceId 的获取：当然了，Dubbo 的服务提供者也可以利用这工具类，从 RpcContext 中获取 Trace 信息。</li></ul><p>接下来我们定义一个dubbo过滤器，在服务端和提供端都调用这个过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.dubbodemo4.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Filter;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.RpcContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.RpcException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.kevin.dubbodemo4.util.TraceUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//@Activate(order = 100, group = &#123; Constants.PROVIDER_PROTOCOL, Constants.CONSUMER_PROTOCOL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboTraceFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="comment">// 执行前</span></span><br><span class="line">        handleTraceInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用前处理 Trace 信息</span></span><br><span class="line">        printRequest(invocation);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> invoker.invoke(invocation);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用后打印响应信息</span></span><br><span class="line">        printResponse(invocation, result, end - start);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 打印请求信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printRequest</span><span class="params">(Invocation invocation)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; responseMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        responseMap.put(<span class="string">&quot;interfaceClassName&quot;</span>, invocation.getInvoker().getInterface().getName());</span><br><span class="line">        responseMap.put(<span class="string">&quot;methodName&quot;</span>, invocation.getMethodName());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> JSON.toJSONString(getArgs(invocation));</span><br><span class="line">        responseMap.put(<span class="string">&quot;args&quot;</span>, args);</span><br><span class="line">        log.info(<span class="string">&quot;call Dubbo Api start , request is &#123;&#125;&quot;</span>, responseMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 打印响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printResponse</span><span class="params">(Invocation invocation, Result result, <span class="type">long</span> spendTime)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; responseMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        responseMap.put(<span class="string">&quot;interfaceClassName&quot;</span>, invocation.getInvoker().getInterface().getName());</span><br><span class="line">        responseMap.put(<span class="string">&quot;methodName&quot;</span>, invocation.getMethodName());</span><br><span class="line">        responseMap.put(<span class="string">&quot;result&quot;</span>, JSON.toJSONString(result.getValue()));</span><br><span class="line">        responseMap.put(<span class="string">&quot;spendTime&quot;</span>, spendTime);</span><br><span class="line">        log.info(<span class="string">&quot;call Dubbo Api end , response is &#123;&#125;&quot;</span>, responseMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 获取 Invocation 参数，过滤掉大参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] getArgs(Invocation invocation) &#123;</span><br><span class="line">        Object[] args = invocation.getArguments();</span><br><span class="line">        args = Arrays.stream(args).filter(arg -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> <span class="type">byte</span>[] || arg <span class="keyword">instanceof</span> Byte[] || arg <span class="keyword">instanceof</span> InputStream || arg <span class="keyword">instanceof</span> File) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;).toArray();</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 处理 Trace等信息，如果当前对象是服务消费者，则将 Trace 信息放入 RpcContext中 如果当前对象是服务提供者，则从 RpcContext 中获取 Trace 信息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleTraceInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RpcContext</span> <span class="variable">context</span> <span class="operator">=</span> RpcContext.getContext();</span><br><span class="line">        <span class="keyword">if</span> (context.isConsumerSide()) &#123; <span class="comment">// 消费端</span></span><br><span class="line">            TraceUtil.setTraceInto2RpcContext(context);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context.isProviderSide()) &#123; <span class="comment">// 服务提供端</span></span><br><span class="line">            TraceUtil.getTraceFromRpcContext(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面在服务提供方和调用方需要调用</p><h3 id="dubbo-demo4-api"><a href="#dubbo-demo4-api" class="headerlink" title="dubbo-demo4-api"></a>dubbo-demo4-api</h3><p>提供接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHi</span><span class="params">(String uname)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dubbo-demo4-provider"><a href="#dubbo-demo4-provider" class="headerlink" title="dubbo-demo4-provider"></a>dubbo-demo4-provider</h3><p><a href="https://imgse.com/i/vgk8Yj"><img src="https://s1.ax1x.com/2022/08/24/vgk8Yj.png" alt="vgk8Yj.png"></a></p><p>maven配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">demo.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">demo.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo4-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;demo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务提供类的抽象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo4-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;demo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对接口进行实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kevin.dubbodemo4.provider.service.ISayService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于注解方式实现的 dubbo 服务注册。@DubboService 注解是 dubbo 2.6.0 版本开始出现的，以前的版本就叫 @Service</span></span><br><span class="line"><span class="meta">@DubboService(version = &quot;1.0.0&quot;, timeout = 3000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">(String uname)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zk hello , &quot;</span> + uname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供一个启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderAppMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProviderAppMain.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@EnableDubbo启用dubbo</p><p>dubbo的Filter使用的是SPI机制，在resources目录下新建一个META-INF文件夹，在其下再创建一个dubbo目录。在META-INF\dubbo目录下创建一个名称为org.apache.dubbo.rpc.Filter（如果你用的是2.7之前的版本，则名称为com.alibaba.dubbo.rpc.Filter），里面内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dubboProviderLogFilter=com.kevin.dubbodemo4.filter.DubboTraceFilter</span><br></pre></td></tr></table></figure><p>配置application.yml文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="comment">#application这个节点下配置的是服务名称之类的，必须配置，否则会报错，且必须唯一，也就是在注册中心这个名字得唯一</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sayProvider</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">kevin</span>  </span><br><span class="line">  <span class="comment">#这是配置 dubbo的注册中心地址</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span>  </span><br><span class="line">  <span class="attr">provider:</span></span><br><span class="line">  <span class="comment">#上面文件中配置的等号左侧部分</span></span><br><span class="line">    <span class="attr">filter:</span> <span class="string">dubboProviderLogFilter</span></span><br></pre></td></tr></table></figure><h3 id="dubbo-demo4-consumer"><a href="#dubbo-demo4-consumer" class="headerlink" title="dubbo-demo4-consumer"></a>dubbo-demo4-consumer</h3><p><a href="https://imgse.com/i/vgkWnK"><img src="https://s1.ax1x.com/2022/08/24/vgkWnK.png" alt="vgkWnK.png"></a></p><p>maven配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- demo版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">demo.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">demo.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo4-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;demo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务提供类的抽象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo4-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;demo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先看过滤器，前面dubbo的过滤器已经写了，但是你有没有考虑过里面的traceId和traceUri是什么时候传进去的，就是这里了</p><p>利用 @WebFilter，拦截所有 Http 请求，然后利用 TraceUtil 给这个请求初始化对应的 Trace 信息，然后将  Trace 信息利用 SLF4J 提供的 MDC 机制存放起来。之后利用 Logger 打日志的时候，会带上 Trace 信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过滤器，使用了servlet注解，需要在启动类上增加<span class="doctag">@ServletComponentScan</span>注解</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebRequestFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:donggongai@126.com&quot; target=&quot;_blank&quot;&gt;吕凯&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年8月24日 下午2:02:59</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebRequestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">// 初始化 TraceId</span></span><br><span class="line">        TraceUtil.initTraceInfo(uri);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除 TraceId 和 TraceUri</span></span><br><span class="line">        TraceUtil.clearTraceInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayController</span> &#123;</span><br><span class="line">    <span class="comment">/* @DubboReference 注解： 这个注解就是说，这里注入的是 dubbo 的服务接口。 </span></span><br><span class="line"><span class="comment">    url 指向的就是 点对点的服务提供者的 dubbo 地址，看这个地址，就能与 SayProvider项目的application.yml 中的配置对应上了。*/</span></span><br><span class="line">    <span class="meta">@DubboReference(version = &quot;1.0.0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ISayService sayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sayService.sayHi(<span class="string">&quot;兔先生!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerAppMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerAppMain.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@EnableDubbo启用dubbo</p><p>dubbo的Filter使用的是SPI机制，在resources目录下新建一个META-INF文件夹，在其下再创建一个dubbo目录。在META-INF\dubbo目录下创建一个名称为org.apache.dubbo.rpc.Filter（如果你用的是2.7之前的版本，则名称为com.alibaba.dubbo.rpc.Filter），里面内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dubboProviderLogFilter=com.kevin.dubbodemo4.filter.DubboTraceFilter</span><br></pre></td></tr></table></figure><p>配置application.yml文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span> </span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">SayConsumer</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">kevin</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="attr">filter:</span> <span class="string">dubboProviderLogFilter</span></span><br></pre></td></tr></table></figure><h2 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h2><ol><li>启动zookeeper</li><li>启动dubbo-demo4-provider</li><li>启动dubbo-demo4-consumer</li></ol><p>访问 <a href="http://127.0.0.1:8086/say/hi">http://127.0.0.1:8086/say/hi</a></p><p>访问可以看到控制台打印了url和traceId</p><p><a href="https://imgse.com/i/vgA99s"><img src="https://s1.ax1x.com/2022/08/24/vgA99s.md.png" alt="vgA99s.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> dubbo-入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo-demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo-demo3：带springboot、zookeeper的示例</title>
      <link href="/2022/09/23/dubbo-3/"/>
      <url>/2022/09/23/dubbo-3/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本项目需要启动 zookeeper 作为注册中心，因此，需要安装和启动 zookeeper。</p><p>技术栈包括 springboot + dubbo + zookeeper，采用注册中心连接方式<br>分为2部分，1服务提供者dubbo-demo3-provider，2服务调用者dubbo-demo3-consumer</p><p>分为2部分</p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>dubbo-demo3-provider</td><td>服务提供方的具体实现</td></tr><tr><td>dubbo-demo3-consumer</td><td>服务调用方</td></tr></tbody></table><p>跟demo2的区别是引入了zookeeper的jar包和配置文件中dubbo路径不同，代码层面一致</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java11</span><br><span class="line">maven 3.8.4</span><br><span class="line">dubbo 3.0.5</span><br><span class="line">springboot 2.7.2</span><br></pre></td></tr></table></figure><p>注意：高版本的dubbo会存在缓存文件加锁问题，默认生产者和消费者不能再一台机器</p><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><a href="http://archive.apache.org/dist/zookeeper/">下载地址</a> 下载<code>zookeeper</code>官方的bin 压缩包<strong>，</strong>解压就可以使用了，不需要安装。我下载的版本是 <strong>zookeeper 3.8.0</strong> 。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装完成后，需要配置一下<code>zoo.cfg</code>文件，该文件默认不存在，可以参考<code>conf/zoo_example.cfg</code>，复制这个文件改为为zoo.cfg，根据这个文件进行修改。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务端与客户端的session的会话时间 以ms为单位</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment">#快照保存目录(这个目录可以自行指定),windows下注意分隔符</span></span><br><span class="line">dataDir=F:/Program Files/apache-zookeeper-3.8.0/zk1</span><br><span class="line"><span class="comment">#客户端访问zk的端口</span></span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>j进入bin目录，在<code>Linux</code>下启动使用<code>zkServer.sh start</code>命令，而<code>windows</code>下使用<code>zkServer.cmd</code>命令</p><p><strong>注意：zookeeper需要使用java，如果没有配置<code>JAVA_HOME</code>，需要先配置环境变量或者在zoo.cfg的开始部分配置临时变量。</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_HOME=<span class="string">&quot;F:/Program Files/Java/jdk-11.0.12&quot;</span></span><br></pre></td></tr></table></figure><p>以上是单机模式启动，可以设置多个机器做集群。</p><h3 id="伪集群测试"><a href="#伪集群测试" class="headerlink" title="伪集群测试"></a>伪集群测试</h3><p>我们这里只是为了测试方便就不部署真正的集群了，部署个伪集群（同一台机器）方便测试</p><p>创建3个配置文件，conf目录下分别创建zoo1.cfg，zoo2.cfg，zoo3.cfg 3个配置文件，里面对应的clientPort分别为2181、2182、2183</p><p>然后创建3个数据文件zk1、zk2、zk3（F:&#x2F;Program Files&#x2F;apache-zookeeper-3.8.0目录下），dataDir里面与之对应。</p><p>zk1、zk2、zk3中分别创建myid，里面的内容分别为1、2、3</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#session的会话时间 以ms为单位</span><br><span class="line">tickTime=2000</span><br><span class="line"></span><br><span class="line">#服务器启动以后，master和slave通讯的时间</span><br><span class="line">initLimit=10</span><br><span class="line"></span><br><span class="line">#master和slave之间的心跳检测时间，检测slave是否存活</span><br><span class="line">syncLimit=5</span><br><span class="line"></span><br><span class="line">#快照保存目录(这个目录可以自行指定),windows下注意分隔符</span><br><span class="line">dataDir=F:/Program Files/apache-zookeeper-3.8.0/zk1</span><br><span class="line"></span><br><span class="line">#客户端访问zk的端口</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line">#zookeeper对应于前面在hosts里面配置的主机映射 2888是数据同步和消息传递端口，3888是选举端口</span><br><span class="line">server.1=zookeeper:2888:3888</span><br><span class="line"></span><br><span class="line">#zookeeper对应于前面在hosts里面配置的主机映射 2889是数据同步和消息传递端口，3889是选举端口 </span><br><span class="line">server.2=zookeeper:2889:3889</span><br><span class="line"></span><br><span class="line">#zookeeper对应于前面在hosts里面配置的主机映射 2890是数据同步和消息传递端口，3890是选举端口 </span><br><span class="line">server.3=zookeeper:2890:3890</span><br></pre></td></tr></table></figure><p>启动</p><p>linux下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./zkServer.sh start /software/apache-zookeeper-3.8.0/conf/zoo1.cfg</span><br><span class="line">./zkServer.sh start /software/apache-zookeeper-3.8.0/conf/zoo2.cfg</span><br><span class="line">./zkServer.sh start /software/apache-zookeeper-3.8.0/conf/zoo3.cfg</span><br></pre></td></tr></table></figure><p>windows下需要自己重新定义zkServer.cmd文件，复制原来的zkServer.cmd设置cfg路径，zkServer1.cmd为例</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> JAVA_HOME=<span class="string">&quot;F:/Program Files/Java/jdk-11.0.12&quot;</span></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">setlocal</span><br><span class="line">call <span class="string">&quot;%~dp0zkEnv.cmd&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ZOOMAIN=org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br><span class="line"><span class="built_in">set</span> ZOO_LOG_FILE=zookeeper-%USERNAME%-server-%COMPUTERNAME%.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">set</span> ZOOCFG=%ZOOCFGDIR%\zoo1.cfg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> on</span><br><span class="line">call %JAVA% <span class="string">&quot;-Dzookeeper.log.dir=%ZOO_LOG_DIR%&quot;</span> <span class="string">&quot;-Dzookeeper.log.file=%ZOO_LOG_FILE%&quot;</span> <span class="string">&quot;-XX:+HeapDumpOnOutOfMemoryError&quot;</span> <span class="string">&quot;-XX:OnOutOfMemoryError=cmd /c taskkill /pid %%%%p /t /f&quot;</span> -<span class="built_in">cp</span> <span class="string">&quot;%CLASSPATH%&quot;</span> %ZOOMAIN% <span class="string">&quot;%ZOOCFG%&quot;</span> %*</span><br><span class="line"></span><br><span class="line">endlocal</span><br></pre></td></tr></table></figure><p>然后分别执行zkServer1.cmd、zkServer2.cmd、zkServer3.cmd</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>安装zookeeper报错Address unresolved: 10.19.32.30:3888，看配置最后是不是多了空格</p><p>一般建议集群分布必须是奇数台，因为必须满足n&#x2F;2+1&#x3D;m,m必须大于部署zk机器数的一半(n&#x2F;2)可用才认为集群可用，而且奇数台更节省资源。</p><h2 id="dubbo-admin"><a href="#dubbo-admin" class="headerlink" title="dubbo-admin"></a>dubbo-admin</h2><p>dubbo-admin为dubbo的监控管理软件</p><h3 id="下载安装-1"><a href="#下载安装-1" class="headerlink" title="下载安装"></a>下载安装</h3><p>源码地址为<a href="https://github.com/apache/dubbo-admin/tree/master%EF%BC%8Cmaster%E5%88%86%E6%94%AF%E5%B7%B2%E7%BB%8F%E6%98%AF%E5%89%8D%E5%90%8E%E5%8F%B0%E5%88%86%E7%A6%BB%E3%80%82">https://github.com/apache/dubbo-admin/tree/master，master分支已经是前后台分离。</a></p><p>release下载地址 <a href="https://github.com/apache/dubbo-admin/releases%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AF%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85[apache-dubbo-admin-0.4.0-bin-release.tar.gz](https://github.com/apache/dubbo-admin/releases/download/0.4.0/apache-dubbo-admin-0.4.0-bin-release.tar.gz)">https://github.com/apache/dubbo-admin/releases，我这里下载的是可执行文件的压缩包[apache-dubbo-admin-0.4.0-bin-release.tar.gz](https://github.com/apache/dubbo-admin/releases/download/0.4.0/apache-dubbo-admin-0.4.0-bin-release.tar.gz)</a></p><ol><li>需要使用java9以下，否则缺包</li><li>安装目录中不能有空格</li><li>默认8080端口可能被占用，建议修改为7001</li></ol><p>下载解压后修改端口为7001后，执行bin目录下的startup.cmd（windows）或startup.sh（linux），登录（密码在bin\config\application.properties中）后可以看到注册的服务，点击后面的“测试”按钮可以直接在线调试。</p><p><a href="https://imgse.com/i/vg4ePA"><img src="https://s1.ax1x.com/2022/08/25/vg4ePA.md.png" alt="vg4ePA.md.png"></a></p><h3 id="master-0-2-0"><a href="#master-0-2-0" class="headerlink" title="master-0.2.0"></a>master-0.2.0</h3><p>如果不想使用前后端分离的版本，选用master-0.2.0分支。</p><p>下载修改配置文件<code>src/main/resources/application.properties</code>打包执行或者直接在IDE中执行</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>查看信息时发现读取dubbo的版本有问题</p><p>版本信息从哪里来呢？从provider的url中获取参数<code>release</code>（优先）、<code>dubbo</code>来判断provider的dubbo版本，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dubbo://192.168.1.211:20880/com.kevin.dubbodemo3.provider.service.ISayService?anyhost=true&amp;application=sayProvider&amp;background=false&amp;deprecated=false&amp;dubbo=2.0.2&amp;dynamic=true&amp;generic=false&amp;interface=com.kevin.dubbodemo3.provider.service.ISayService&amp;methods=sayHi&amp;owner=kevin&amp;pid=14948&amp;release=3.0.10&amp;revision=1.0.0&amp;service-name-mapping=true&amp;side=provider&amp;timeout=3000×tamp=1661245756674&amp;version=1.0.0</span><br></pre></td></tr></table></figure><p>这里面有些历史原因，看dubbo 2.6.x的源码会发现，在2.6.3版本之前，url中dubbo参数代表的是dubbo的版本，而在2.6.3及以后的版本中，dubbo参数代表的是dubbo协议的版本。</p><ul><li><code>[2.5.3, 2.6.3)</code>版本中，dubbo版本与dubbo协议没有分开，都是用url上的dubbo参数，值是对应的版本号，取值范围是 <code>&gt;=2.0.0 &amp;&amp; &lt;=2.6.2</code></li><li><code>[2.6.3, 2.7.0)</code>版本，无法从provider注册的url上看出dubbo版本，dubbo协议版本是从url的dubbo参数获取，固定为<code>2.0.2</code></li><li><code>2.7.0</code>之后的版本，dubbo版本在provider的url release参数上，dubbo协议版本在dubbo参数上，目前还是2.0.2</li></ul><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p><a href="https://imgse.com/i/vgA7aF"><img src="https://s1.ax1x.com/2022/08/24/vgA7aF.png" alt="vgA7aF.png"></a></p><p>父项目pom文件（部分）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- java版本，11 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.0.5以上版本存在文件锁或者不能正常启动的问题，所以没有使用更高版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo-starter.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">dubbo-starter.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zkclient.version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">zkclient.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">curator.version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">curator.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- apache 官方 3.0 starter依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zookeeper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- zookeeper客户端 只需引入此依赖curator-framework curator-recipes 都有 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-x-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;curator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试时引用src/main/resources下的资源文件 如果test下面有同类型的文件,则以test的为准--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务提供者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo3-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务消费者--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo3-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dubbo-demo3-provider"><a href="#dubbo-demo3-provider" class="headerlink" title="dubbo-demo3-provider"></a>dubbo-demo3-provider</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="C:\Users\LD_001\AppData\Roaming\Typora\typora-user-images\image-20220824153013860.png" alt="image-20220824153013860"></p><h4 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h4><p>引入spring-boot-starter包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖中加入了 <strong>spring-boot-start</strong> ，这个项目不需要 web ，dubbo 与 web无关。</p><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="comment">#application这个节点下配置的是服务名称之类的，必须配置，否则会报错，且必须唯一，也就是在注册中心这个名字得唯一</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sayProvider</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">kevin</span> </span><br><span class="line">  <span class="comment">#在这里统一定义服务版本</span></span><br><span class="line">  <span class="comment">#version: 1.0.0</span></span><br><span class="line">  <span class="comment">#这是配置 dubbo的注册中心地址</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line">  <span class="comment">#定义dubbo的协议及端口，注意对比demo2</span></span><br><span class="line">  <span class="comment">#protocol:</span></span><br><span class="line">    <span class="comment">#name: dubbo</span></span><br><span class="line">    <span class="comment">#port: 20880</span></span><br></pre></td></tr></table></figure><p>dubbo.application : 主要是配置dubbo的服务名称，这个服务名称是注册到注册中心的名称。 </p><p>dubbo.registry.address: 指向的是 zookeeper ，就是在前文安装和启动的那个 zookeeper ，具体的ip和port 自行调整。</p><h4 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHi</span><span class="params">(String uname)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务实现类"><a href="#服务实现类" class="headerlink" title="服务实现类"></a>服务实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于注解方式实现的 dubbo 服务注册。@DubboService 注解是 dubbo 2.6.0 版本开始出现的，以前的版本就叫 @Service</span></span><br><span class="line"><span class="meta">@DubboService(version = &quot;1.0.0&quot;, timeout = 3000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">(String uname)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zk hello , &quot;</span> + uname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>@DubboService</strong> 注解，这是暴露 dubbo 接口服务的。</p><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderAppMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProviderAppMain.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>@EnableDubbo</code>注解启用dubbo</p><h3 id="dubbo-demo3-consumer"><a href="#dubbo-demo3-consumer" class="headerlink" title="dubbo-demo3-consumer"></a>dubbo-demo3-consumer</h3><h4 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h4><p><a href="https://imgse.com/i/vgEgeK"><img src="https://s1.ax1x.com/2022/08/24/vgEgeK.png" alt="vgEgeK.png"></a></p><h4 id="引入jar包-1"><a href="#引入jar包-1" class="headerlink" title="引入jar包"></a>引入jar包</h4><p>引入springboot的web包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">SayConsumer</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">kevin</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><h4 id="服务接口-1"><a href="#服务接口-1" class="headerlink" title="服务接口"></a>服务接口</h4><p>相同目录下放一个接口类，注意这个地方应该是引入一个公共jar包的，这里偷个懒。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.dubbodemo3.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sayHi</span><span class="params">(String uname)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，一定要跟服务提供的接口 <strong>同包名、同类名！！！</strong></p><h4 id="controller类"><a href="#controller类" class="headerlink" title="controller类"></a>controller类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* @DubboReference 注解： 这个注解就是说，这里注入的是 dubbo 的服务接口。 </span></span><br><span class="line"><span class="comment">    url 指向的就是 点对点的服务提供者的 dubbo 地址，看这个地址，就能与 SayProvider项目的application.yml 中的配置对应上了。*/</span></span><br><span class="line">    <span class="meta">@DubboReference(version = &quot;1.0.0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ISayService sayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sayService.sayHi(<span class="string">&quot;兔先生!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@DubboReference</strong>引入服务</p><h4 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerAppMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerAppMain.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@EnableDubbo</strong>注解启用dubbo</p><h2 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h2><ol><li>启动zookeeper</li><li>启动dubbo-demo3-provider</li><li>启动dubbo-demo3-consumer</li></ol><p>访问 <a href="http://127.0.0.1:8086/say/hi">http://127.0.0.1:8086/say/hi</a></p>]]></content>
      
      
      <categories>
          
          <category> dubbo-入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo-demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo-demo2：带springboot、不带zookeeper的示例</title>
      <link href="/2022/09/23/dubbo-2/"/>
      <url>/2022/09/23/dubbo-2/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>技术栈包括 <code>springboot</code> + <code>dubbo</code> ，没有<code>zookeeper</code>，采用的点对点直连方式 </p><p>分为2部分，1服务提供者dubbo-demo2-provider，2服务调用者dubbo-demo2-consumer  </p><p>先启动provider的TestMain方法，在启动consumer的TestMain方法</p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>dubbo-demo2-provider</td><td>服务提供方的具体实现</td></tr><tr><td>dubbo-demo2-consumer</td><td>服务调用方</td></tr></tbody></table><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java11</span><br><span class="line">maven 3.8.4</span><br><span class="line">dubbo 3.0.10</span><br><span class="line">springboot 2.7.2</span><br></pre></td></tr></table></figure><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p><a href="https://imgse.com/i/vgefFU"><img src="https://s1.ax1x.com/2022/08/24/vgefFU.png" alt="vgefFU.png"></a></p><p>父项目pom文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-demo2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>简单示例，springboot项目，不带zookeeper<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- java版本，11 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 测试包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试时引用src/main/resources下的资源文件 如果test下面有同类型的文件,则以test的为准--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务提供者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo2-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务消费者--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo2-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dubbo-demo2-provider"><a href="#dubbo-demo2-provider" class="headerlink" title="dubbo-demo2-provider"></a>dubbo-demo2-provider</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="C:\Users\LD_001\AppData\Roaming\Typora\typora-user-images\image-20220824162328168.png" alt="image-20220824162328168"></p><h4 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h4><p>引入spring-boot-starter包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖中加入了 <strong>spring-boot-start</strong> ，这个项目不需要 web ，dubbo 与 web无关。</p><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="comment">#application这个节点下配置的是服务名称之类的，必须配置，否则会报错，且必须唯一，也就是在注册中心这个名字得唯一。不过这个项目是点对点直连的，就无所谓了。</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sayProvider</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">kevin</span></span><br><span class="line">  <span class="attr">monitor:</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">registry</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment">#这是配置 dubbo的注册中心地址，N/A 表示不配置注册中心。因为我要实现点对点直连，因此不需要注册中</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">N/A</span></span><br><span class="line">  <span class="comment">#定义dubbo的协议及端口</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20880</span></span><br></pre></td></tr></table></figure><p>dubbo.application : 主要是配置dubbo的服务名称，这个服务名称是注册到注册中心的名称。 </p><p>dubbo.registry.address: 指向的是 zookeeper ，就是在前文安装和启动的那个 zookeeper ，具体的ip和port 自行调整。</p><h4 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHi</span><span class="params">(String uname)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务实现类"><a href="#服务实现类" class="headerlink" title="服务实现类"></a>服务实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kevin.dubbodemo2.provider.service.ISayService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于注解方式实现的 dubbo 服务注册。@DubboService 注解是 dubbo 2.6.0 版本开始出现的，以前的版本就叫 @Service</span></span><br><span class="line"><span class="meta">@DubboService(version = &quot;1.0.0&quot;, timeout = 3000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">(String uname)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , &quot;</span> + uname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>@DubboService</strong> 注解，这是暴露 dubbo 接口服务的。</p><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderAppMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProviderAppMain.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>@EnableDubbo</code>注解启用dubbo</p><h3 id="dubbo-demo2-consumer"><a href="#dubbo-demo2-consumer" class="headerlink" title="dubbo-demo2-consumer"></a>dubbo-demo2-consumer</h3><h4 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h4><p><a href="https://imgse.com/i/vgmi0P"><img src="https://s1.ax1x.com/2022/08/24/vgmi0P.png" alt="vgmi0P.png"></a></p><h4 id="引入jar包-1"><a href="#引入jar包-1" class="headerlink" title="引入jar包"></a>引入jar包</h4><p>引入springboot的web包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">SayConsumer</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">kevin</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">N/A</span></span><br></pre></td></tr></table></figure><h4 id="服务接口-1"><a href="#服务接口-1" class="headerlink" title="服务接口"></a>服务接口</h4><p>相同目录下放一个接口类，注意这个地方应该是引入一个公共jar包的，这里偷个懒。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.dubbodemo3.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sayHi</span><span class="params">(String uname)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，一定要跟服务提供的接口 <strong>同包名、同类名！！！</strong></p><h4 id="controller类"><a href="#controller类" class="headerlink" title="controller类"></a>controller类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kevin.dubbodemo2.provider.service.ISayService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* @DubboReference 注解： 这个注解就是说，这里注入的是 dubbo 的服务接口。 </span></span><br><span class="line"><span class="comment">    url 指向的就是 点对点的服务提供者的 dubbo 地址，看这个地址，就能与 SayProvider项目的application.yml 中的配置对应上了。*/</span></span><br><span class="line">    <span class="meta">@DubboReference(version = &quot;1.0.0&quot;, url = &quot;dubbo://127.0.0.1:20880&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ISayService sayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sayService.sayHi(<span class="string">&quot;兔先生!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@DubboReference</strong>引入服务</p><h4 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerAppMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerAppMain.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@EnableDubbo</strong>注解启用dubbo</p><h2 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h2><ol><li>启动zookeeper</li><li>启动dubbo-demo2-provider</li><li>启动dubbo-demo2-consumer</li></ol><p>访问 <a href="http://127.0.0.1:8086/say/hi">http://127.0.0.1:8086/say/hi</a></p><p>页面输出，<code>hello , 兔先生!!!</code></p>]]></content>
      
      
      <categories>
          
          <category> dubbo-入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo-demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo-demo1：不带springboot、zookeeper的示例</title>
      <link href="/2022/09/23/dubbo-1/"/>
      <url>/2022/09/23/dubbo-1/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>dubbo不使用springboot和zookeeper的简单示例。</p><p>分为2部分，1服务提供者dubbo-demo1-provider，2服务调用者dubbo-demo1-consumer。</p><p>整个项目的流程：服务提供者只提供一个sayHi(String uname)，调用者调用这个方法。</p><p>先启动provider的TestMain方法，在启动consumer的TestMain方法</p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>dubbo-demo2-provider</td><td>服务提供方的具体实现</td></tr><tr><td>dubbo-demo2-consumer</td><td>服务调用方</td></tr></tbody></table><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java11</span><br><span class="line">maven 3.8.4</span><br><span class="line">dubbo 3.0.10</span><br></pre></td></tr></table></figure><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><p><a href="https://imgse.com/i/vgVOnx"><img src="https://s1.ax1x.com/2022/08/24/vgVOnx.png" alt="vgVOnx.png"></a></p><p>pom文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-demo1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>简单示例，不带springboot、zookeeper等<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- java版本，11 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- dubbo依赖netty --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.79.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试时引用src/main/resources下的资源文件 如果test下面有同类型的文件,则以test的为准--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务提供者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo1-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务消费者--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-demo1-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dubbo-demo1-provider"><a href="#dubbo-demo1-provider" class="headerlink" title="dubbo-demo1-provider"></a>dubbo-demo1-provider</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><a href="https://imgse.com/i/vgZ1uq"><img src="https://s1.ax1x.com/2022/08/24/vgZ1uq.png" alt="vgZ1uq.png"></a></p><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo1-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>简单示例，服务提供者<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHi</span><span class="params">(String uname)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务实现类"><a href="#服务实现类" class="headerlink" title="服务实现类"></a>服务实现类</h4><p>实现上面的接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">(String uname)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , &quot;</span> + uname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dubbo配置文件"><a href="#dubbo配置文件" class="headerlink" title="dubbo配置文件"></a>dubbo配置文件</h4><p>dubbo-provider.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;SayProvider&quot;</span> <span class="attr">owner</span>=<span class="string">&quot;kevin&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">&quot;registry&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:registry address=&quot;N/A&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;N/A&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--当前服务发布所依赖的协议；webserovice、Thrift、Hessain、http--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--服务发布的配置，需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">version</span>=<span class="string">&quot;1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">interface</span>=<span class="string">&quot;com.kevin.dubbodemo1.provider.service.ISayService&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">ref</span>=<span class="string">&quot;sayService&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--服务的实现bean定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sayService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kevin.dubbodemo1.provider.service.impl.SayServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个文件其实是一个 spring 配置文件。 <code>dubbo</code> 底层是基于 <code>spring</code> 的，引入dubbo的包可以直接使用spring。</p><p>这个文件的几部分解释一下：</p><p>1 dubbo:application  配置应用名称的，或者叫服务名称，每个服务必须有一个唯一的名字。</p><p>2 dubbo:registry 指向注册中心，这里的值为 N&#x2F;A ，就是说不需要注册到注册中心。本文采用直连方式，因此没有注册中心。</p><p>3 dubbo:protocol dubbo通信采用的协议和端口 ，就是dubbo的服务提供者和消费者之间的通信协议。</p><p>4 dubbo:service 这是暴露 一个dubbo接口，服务提供者提供出来一个api 。interface指向的接口，ref 指向的是 spring 的依赖对象名称 </p><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><p>test目录中写一个测试用例类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;dubbo-provider.xml&quot;</span>);</span><br><span class="line">        context.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.in.read(); <span class="comment">// 按任意键退出</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dubbo-demo1-consumer"><a href="#dubbo-demo1-consumer" class="headerlink" title="dubbo-demo1-consumer"></a>dubbo-demo1-consumer</h3><h4 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h4><p><a href="https://imgse.com/i/vgZ4KI"><img src="https://s1.ax1x.com/2022/08/24/vgZ4KI.png" alt="vgZ4KI.png"></a></p><h4 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kevin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-demo1-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>简单示例，服务消费者<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="服务接口-1"><a href="#服务接口-1" class="headerlink" title="服务接口"></a>服务接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.dubbodemo1.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sayHi</span><span class="params">(String uname)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制一个方法提供方的接口类过来</p><h4 id="dubbo配置文件-1"><a href="#dubbo配置文件-1" class="headerlink" title="dubbo配置文件"></a>dubbo配置文件</h4><p>dubbo-provider.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;SayConsumer&quot;</span> <span class="attr">owner</span>=<span class="string">&quot;kevin&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点对点的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;N/A&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--生成一个远程服务的调用代理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点对点方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;sayService&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">interface</span>=<span class="string">&quot;com.kevin.dubbodemo1.consumer.service.ISayService&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">url</span>=<span class="string">&quot;dubbo://127.0.0.1:20880/com.kevin.dubbodemo1.provider.service.ISayService&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件里面的注释以及比较详细了，注意dubbo:reference，里面的interface为本地的接口类完整路径，url为调用地址，格式为：“协议:&#x2F;&#x2F;地址&#x2F;提供方接口类完整路径”</p><h4 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h4><p>增加junit单元测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kevin.dubbodemo1.consumer.service.ISayService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;dubbo-consumer.xml&quot;</span>);</span><br><span class="line">        context.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">ISayService</span> <span class="variable">sayService</span> <span class="operator">=</span> (ISayService) context.getBean(<span class="string">&quot;sayService&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sayService.sayHi(<span class="string">&quot;9527!&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        context.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h2><ol><li>启动dubbo-demo1-provider</li><li>启动dubbo-demo1-consumer</li></ol><p>访问 <a href="http://127.0.0.1:8086/say/hi">http://127.0.0.1:8086/say/hi</a></p><p>页面输出 <code>hello , 9527!</code></p>]]></content>
      
      
      <categories>
          
          <category> dubbo-入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo-demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>侠客行 唐代 诗人 李白</title>
      <link href="/2022/09/19/mspa-two-blog/"/>
      <url>/2022/09/19/mspa-two-blog/</url>
      
        <content type="html"><![CDATA[<p>　　赵客缦胡缨，吴钩霜雪明。<br>　　银鞍照白马，飒沓如流星。<br>　　十步杀一人，千里不留行。<br>　　事了拂衣去，深藏身与名。<br>　　闲过信陵饮，脱剑膝前横。<br>　　将炙啖朱亥，持觞劝侯嬴。<br>　　三杯吐然诺，五岳倒为轻。<br>　　眼花耳热后，意气素霓生。<br>　　救赵挥金锤，邯郸先震惊。<br>　　千秋二壮士，烜赫大梁城。<br>　　纵死侠骨香，不惭世上英。<br>　　谁能书阁下，白首太玄经。<br>　　【注释】<br>　　⑴行，这里不是行走的行，而是歌行体的行，侠客行，等于说“侠客的歌”<br>　　⑵赵客，燕赵之地的侠客。自古燕赵多慷慨悲歌之士<br>　　⑶吴钩，宝刀名。霜雪明，谓宝刀的锋刃像霜雪一样明亮<br>　　⑷飒沓，群飞的样子，形容马跑得快<br>　　⑸“十步”两句原自《庄子·说剑》：“臣之剑十步一人，千里不留行。”这里是说侠客剑术高强，而且勇敢<br>　　⑹信陵，信陵君，战国四公子之一，为人礼贤下士，门下食客三千余人<br>　　⑺朱亥、侯嬴，都是信陵君的门客。朱本是一屠夫，侯原是魏国都城大梁东门的门官，两人都受到信陵君的礼遇，都为信陵君所用。炙，烤肉。啖，吃。啖朱亥，让朱亥来吃<br>　　【翻译】<br>　　燕赵的侠士，头上系着侠士的武缨，腰佩吴越闪亮的弯刀，骑着银玻白马，像流星一样在大街上弛骋。他们的武艺盖世，十步可斩杀一人，干里之行，无人可挡。他们为人仗义行侠，事成之后，连个姓名也不肯留下。想当年，侯嬴、朱亥与信陵君结交，与之脱剑横膝，交相欢饮。<br>　　【赏析】<br>　　李白这一首《侠客行》古风，抒发了他对侠客的倾慕，对拯危济难、用世立功生活的向往。</p>]]></content>
      
      
      <categories>
          
          <category> 诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《将进酒》 李白</title>
      <link href="/2022/09/16/mspa-first-blog/"/>
      <url>/2022/09/16/mspa-first-blog/</url>
      
        <content type="html"><![CDATA[<hr><p>君不见，黄河之水天上来，<br>奔流到海不复回。<br>君不见，高堂明镜悲白发，<br>朝如青丝暮成学！<br>人生得意须尽欢，莫使金樽空对月。<br>天生我材必有用，千金散尽还复来。<br>烹羊宰牛且为乐，会须一饮三百杯。<br>岑夫子，丹丘生，将进酒，杯莫停。<br>与君歌一曲，请君为我倾耳听。</p>]]></content>
      
      
      <categories>
          
          <category> 诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/13/hello-world/"/>
      <url>/2022/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
